#!/usr/bin/env lua

-- Script to generate mime-types-to-extensions.lua from extensions-to-mime-types.lua
-- This reverses the dictionary mapping

-- Get the directory of this script
local script_dir = debug.getinfo(1, "S").source:match("^@(.*/)")
local project_root = script_dir:gsub("scripts/$", "")
local lib_dir = project_root .. "src/contracts/lib/"

-- Load the extensions to mime types mapping
package.path = lib_dir .. "?.lua;" .. package.path
local extensions_to_mime = require('extensions-to-mime-types')

-- Create the reversed mapping
local mime_to_extensions = {}

for extension, mime_type in pairs(extensions_to_mime) do
    if not mime_to_extensions[mime_type] then
        mime_to_extensions[mime_type] = {}
    end
    table.insert(mime_to_extensions[mime_type], extension)
end

-- Sort extensions for each mime type for consistency
for mime_type, extensions in pairs(mime_to_extensions) do
    table.sort(extensions)
end

-- Generate the output file content
local output_lines = {
    "-- This file is auto-generated from extensions-to-mime-types.lua",
    "-- DO NOT EDIT THIS FILE DIRECTLY",
    "return {"
}

-- Sort mime types for consistent output
local sorted_mime_types = {}
for mime_type in pairs(mime_to_extensions) do
    table.insert(sorted_mime_types, mime_type)
end
table.sort(sorted_mime_types)

-- Generate entries
for i, mime_type in ipairs(sorted_mime_types) do
    local extensions = mime_to_extensions[mime_type]
    local extensions_str = '{"' .. table.concat(extensions, '", "') .. '"}'
    local line = string.format('  ["%s"] = %s', mime_type, extensions_str)
    if i < #sorted_mime_types then
        line = line .. ","
    end
    table.insert(output_lines, line)
end

table.insert(output_lines, "}")

-- Write to file in the common directory
local output_file = lib_dir .. "mime-types-to-extensions.lua"
local file = io.open(output_file, "w")
if file then
    file:write(table.concat(output_lines, "\n"))
    file:close()
    print("Generated " .. output_file)
else
    error("Could not write to " .. output_file)
end
